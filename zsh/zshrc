########################
#### Autocomplete ######
########################

# Perform some sanity checks on completion option
autoload -Uz compinit
compinit

zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}'
zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"
zstyle ':completion:*' rehash true
# Speed up completion
zstyle ':completion:*' accept-exact '*(N)'
zstyle ':completion:*' use-cache on
zstyle ':completion:*' cache-path ~/.zsh/cache

# Get completion for hostname if in ~/.ssh/config
_hosts() { compadd $(getent hosts | tr -s ' ' '\t' | cut -f2) }

#######################
### Options ###########
#######################

setopt CORRECT # Make suggestions for correcting spelling mistakes
setopt EXTENDED_GLOB # Inlude ~ in globbing
setopt CASE_GLOB # Case sensitive globbing
setopt GLOB_COMPLETE # Use pattern matching for wildcards and ~
setopt NUMERIC_GLOB_SORT # Sort numerically if numbers are present in globbing
setopt RC_EXPAND_PARAM # Expand globbing arrays to full names
setopt NO_BEEP # Disable system beeps
setopt MARK_DIRS # Always append trailing / to dirs
setopt APPEND_HISTORY # Append to history file instead of overwriting
setopt HIST_IGNORE_DUPS # Ignore adjacent history dups
setopt AUTO_CD # No need to type 'cd' if standard input is a valid path
setopt PROMPT_SUBST # Enable command substitution in prompt

##########################
######## Basics ##########
##########################

# Set history options
HISTFILE=~/.zhistory
HISTSIZE=1000
SAVEHIST=500

# Source aliases
if [ -f ~/.zsh_aliases ]; then
    source ~/.zsh_aliases
fi

# Source fish-like syntax highlighting
if [ -f /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh ]; then
    source /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
fi

# Use history substring search
if [ -f /usr/share/zsh/plugins/zsh-history-substring-search/zsh-history-substring-search.zsh ]; then
    source /usr/share/zsh/plugins/zsh-history-substring-search/zsh-history-substring-search.zsh
    # bind UP and DOWN arrow keys to history substring search
    zmodload zsh/terminfo
    bindkey "$terminfo[kcuu1]" history-substring-search-up
    bindkey "$terminfo[kcud1]" history-substring-search-down
    bindkey '^[[A' history-substring-search-up			
    bindkey '^[[B' history-substring-search-down
fi

# Enable colors
autoload -U colors
colors

######################
####### Prompt #######
######################

# set prompt
PROMPT='%B[%b%n@%m %1~%B]%b%# %E'

# Print greeting message
echo $(uname -srm)
c # Clear screen

#################
### Functions ###
#################

# Source functions
if [ -f ~/.zsh_functions ]; then
  source ~/.zsh_functions
fi

#################
##### Misc ######
#################

# TMUX
if [[ -z "$TMUX" ]] ;then
    ID="$( tmux ls | grep -vm1 attached | cut -d: -f1 )" # get the id of a deattached session
    if [[ -z "$ID" ]] ;then # if not available create a new one
        tmux new-session
    else
        tmux attach-session -t "$ID" # if available attach to it
    fi
fi
if [ -n "$TMUX" ]; then # If tmux is running
    # create a global per-pane variable that holds the pane's PWD
    export PS1=$PS1'$( [ -n $TMUX ] && tmux setenv -g TMUX_PWD_$(tmux display -p "#D" | tr -d %) $PWD)'
fi

######
# This whole git prompt stuff was taken from Manjaro's zsh setup, slightly modified
######

# Modify the colors and symbols in these variables as desired.
GIT_PROMPT_SYMBOL="%{$fg[blue]%}±"                              # plus/minus - clean repo
GIT_PROMPT_PREFIX="%{$fg[green]%}[%{$reset_color%}"
GIT_PROMPT_SUFFIX="%{$fg[green]%}]%{$reset_color%}"
GIT_PROMPT_AHEAD="%{$fg[red]%}ANUM%{$reset_color%}"             # A"NUM" - ahead by "NUM" commits
GIT_PROMPT_BEHIND="%{$fg[cyan]%}BNUM%{$reset_color%}"           # B"NUM" - behind by "NUM" commits
GIT_PROMPT_MERGING="%{$fg_bold[magenta]%}⚡%{$reset_color%}"     # lightning bolt - merge conflict
GIT_PROMPT_UNTRACKED="%{$fg_bold[red]%}●%{$reset_color%}"       # red circle     - untracked files
GIT_PROMPT_MODIFIED="%{$fg_bold[yellow]%}●%{$reset_color%}"     # yellow circle  - tracked files modified
GIT_PROMPT_STAGED="%{$fg_bold[green]%}●%{$reset_color%}"        # green circle   - staged changes present = ready for "git push"

parse_git_branch() {
# Show Git branch/tag, or name-rev if on detached head
( git symbolic-ref -q HEAD || git name-rev --name-only --no-undefined --always HEAD ) 2> /dev/null
}

parse_git_state() {
  # Show different symbols as appropriate for various Git repository states
  # Compose this value via multiple conditional appends.
  local GIT_STATE=""
  local NUM_AHEAD="$(git log --oneline @{u}.. 2> /dev/null | wc -l | tr -d ' ')"
  if [ "$NUM_AHEAD" -gt 0 ]; then
    GIT_STATE=$GIT_STATE${GIT_PROMPT_AHEAD//NUM/$NUM_AHEAD}
  fi
  local NUM_BEHIND="$(git log --oneline ..@{u} 2> /dev/null | wc -l | tr -d ' ')"
  if [ "$NUM_BEHIND" -gt 0 ]; then
    GIT_STATE=$GIT_STATE${GIT_PROMPT_BEHIND//NUM/$NUM_BEHIND}
  fi
  local GIT_DIR="$(git rev-parse --git-dir 2> /dev/null)"
  if [ -n $GIT_DIR ] && test -r $GIT_DIR/MERGE_HEAD; then
    GIT_STATE=$GIT_STATE$GIT_PROMPT_MERGING
  fi
  if [[ -n $(git ls-files --other --exclude-standard 2> /dev/null) ]]; then
    GIT_STATE=$GIT_STATE$GIT_PROMPT_UNTRACKED
  fi
  if ! git diff --quiet 2> /dev/null; then
    GIT_STATE=$GIT_STATE$GIT_PROMPT_MODIFIED
  fi
  if ! git diff --cached --quiet 2> /dev/null; then
    GIT_STATE=$GIT_STATE$GIT_PROMPT_STAGED
  fi
  if [[ -n $GIT_STATE ]]; then
    echo "$GIT_PROMPT_PREFIX$GIT_STATE$GIT_PROMPT_SUFFIX"
  fi
}

git_prompt_string() {
  local git_where="$(parse_git_branch)"
  
  # If inside a Git repository, print its branch and state
  [ -n "$git_where" ] && echo "$GIT_PROMPT_SYMBOL$(parse_git_state)$GIT_PROMPT_PREFIX%{$fg[yellow]%}${git_where#(refs/heads/|tags/)}$GIT_PROMPT_SUFFIX"
  
  # If not inside the Git repo, print exit codes of last command (only if it failed)
  [ ! -n "$git_where" ] && echo "%{$fg[red]%} %(?..[%?])"
}

# Right prompt with exit status of previous command if not successful
 #RPROMPT="%{$fg[red]%} %(?..[%?])" 
# Right prompt with exit status of previous command marked with ✓ or ✗
 RPROMPT="%(?.%{$fg[green]%}✓ %{$reset_color%}.%{$fg[red]%}✗ %{$reset_color%})"

case $(basename "$(cat "/proc/$PPID/comm")") in
  login)
    RPROMPT="%{$fg[red]%} %(?..[%?])"
    ;;
  urxvt)
    RPROMPT='$(git_prompt_string)'
    # Use autosuggestion
    if [ -f /usr/share/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh ]; then
      source /usr/share/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh
      ZSH_AUTOSUGGEST_BUFFER_MAX_SIZE=20
      ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=8'
    fi
    ;;
  konsole|qterminal)
    RPROMPT='$(git_prompt_string)'
    ;;   
  *)
  	if $(ps -p$PPID| grep -q -e konsole -e qterminal); then
          RPROMPT='$(git_prompt_string)'
        else
          RPROMPT='$(git_prompt_string)'
	  ## Base16 Shell color themes.
	  #possible themes: 3024, apathy, ashes, atelierdune, atelierforest, atelierhearth,
	  #atelierseaside, bespin, brewer, chalk, codeschool, colors, default, eighties, 
	  #embers, flat, google, grayscale, greenscreen, harmonic16, isotope, londontube,
	  #marrakesh, mocha, monokai, ocean, paraiso, pop (dark only), railscasts, shapesifter,
	  #solarized, summerfruit, tomorrow, twilight
	  theme="monokai"
	  #Possible variants: dark and light
	  shade="dark"
	  BASE16_SHELL="/usr/share/zsh/scripts/base16-shell/base16-$theme.$shade.sh"
	  [[ -s $BASE16_SHELL ]] && source $BASE16_SHELL
	  # Use autosuggestion
	  if [ -f /usr/share/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh ]; then
	    source /usr/share/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh
	    ZSH_AUTOSUGGEST_BUFFER_MAX_SIZE=20
  	    ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=8'
          fi
  	fi
    ;;
esac

# Color man pages
export LESS_TERMCAP_mb=$'\E[01;32m'
export LESS_TERMCAP_md=$'\E[01;32m'
export LESS_TERMCAP_me=$'\E[0m'
export LESS_TERMCAP_se=$'\E[0m'
export LESS_TERMCAP_so=$'\E[01;47;34m'
export LESS_TERMCAP_ue=$'\E[0m'
export LESS_TERMCAP_us=$'\E[01;36m'
export LESS=-r

# Add support for GnuPG
export GPG_TTY=$(tty)
