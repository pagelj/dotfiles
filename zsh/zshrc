#################
### Functions ###
#################

# Source functions
if [ -f ~/.zsh_functions ]; then
  source ~/.zsh_functions
fi

########################
#### Autocomplete ######
########################

# Perform some sanity checks on completion option
autoload -Uz compinit
compinit

bindkey '^i' expand-or-complete-prefix # Complete inside of string
zstyle ':completion:*' completer _complete _match _approximate # Enable fuzzy matching
zstyle ':completion:*:match:*' original only
zstyle -e ':completion:*:approximate:*' max-errors 'reply=( $(( ($#PREFIX+$#SUFFIX)/3 )) numeric )' # Tolerance of approximate increases by amount of characters typed so far
zstyle ':completion:*:(rm|kill|diff):*' ignore-line yes # Avoid getting the same file offered again with certain programs
zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"
zstyle ':completion:*:descriptions' format "- %d -"
zstyle ':completion:*:corrections' format "- %d - (errors %e})"
zstyle ':completion:*:default' list-prompt '%S%M matches%s'
zstyle ':completion:*' group-name ''
zstyle ':completion:*:manuals' separate-sections true
zstyle ':completion:*:manuals.(^1*)' insert-sections true
zstyle ':completion:*' menu select
zstyle ':completion:*' verbose yes
zstyle ':completion:*' rehash true
# Speed up completion by setting cache
zstyle ':completion:*' use-cache on
zstyle ':completion:*' cache-path ~/.zsh/cache

# Get completion for hostname if in ~/.ssh/config
_hosts() { compadd $(getent hosts | tr -s ' ' '\t' | cut -f2) }

# Use autosuggestion
if [ -f /usr/share/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh ]; then
	source /usr/share/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh
	ZSH_AUTOSUGGEST_BUFFER_MAX_SIZE=20
	ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=8'
fi

#######################
### Options ###########
#######################

setopt CORRECT # Make suggestions for correcting spelling mistakes
setopt EXTENDED_GLOB # Inlude ~ in globbing
setopt CASE_GLOB # Case sensitive globbing
setopt GLOB_COMPLETE # Use pattern matching for wildcards and ~
setopt NUMERIC_GLOB_SORT # Sort numerically if numbers are present in globbing
setopt RC_EXPAND_PARAM # Expand globbing arrays to full names
setopt NO_BEEP # Disable system beeps
setopt MARK_DIRS # Always append trailing / to dirs
setopt APPEND_HISTORY # Append to history file instead of overwriting
setopt HIST_IGNORE_DUPS # Ignore adjacent history dups
setopt AUTO_CD # No need to type 'cd' if standard input is a valid path
setopt PROMPT_SUBST # Enable command substitution in prompt

##########################
######## Basics ##########
##########################

# Set history options
HISTFILE=~/.zhistory
HISTSIZE=1000
SAVEHIST=500

# Source aliases
if [ -f ~/.zsh_aliases ]; then
    source ~/.zsh_aliases
fi

# Source fish-like syntax highlighting
if [ -f /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh ]; then
    source /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
fi

# Use history substring search
if [ -f /usr/share/zsh/plugins/zsh-history-substring-search/zsh-history-substring-search.zsh ]; then
    source /usr/share/zsh/plugins/zsh-history-substring-search/zsh-history-substring-search.zsh
    # bind UP and DOWN arrow keys to history substring search
    zmodload zsh/terminfo
    bindkey "$terminfo[kcuu1]" history-substring-search-up
    bindkey "$terminfo[kcud1]" history-substring-search-down
    bindkey '^[[A' history-substring-search-up			
    bindkey '^[[B' history-substring-search-down
fi

# Enable colors
autoload -U colors
colors

######################
####### Prompt #######
######################

# set left prompt
PROMPT='%b%{$fg[green]%}%(!.#.>>) %{$reset_color%}%E'

######
# This whole git prompt stuff was taken from Manjaro's zsh setup, slightly modified
######

# Modify the colors and symbols in these variables as desired.
GIT_PROMPT_SYMBOL="%{$fg[green]%}"                              # clean repo
GIT_PROMPT_PREFIX="%{$fg[green]%}[%{$reset_color%}"
GIT_PROMPT_SUFFIX="%{$fg[green]%}]%{$reset_color%}"
GIT_PROMPT_AHEAD="%{$fg[green]%}ANUM%{$reset_color%}"           # A"NUM" - ahead by "NUM" commits
GIT_PROMPT_BEHIND="%{$fg[red]%}BNUM%{$reset_color%}"            # B"NUM" - behind by "NUM" commits
GIT_PROMPT_MERGING="%{$fg_bold[magenta]%}!%{$reset_color%}"     # merge conflict
GIT_PROMPT_UNTRACKED="%{$fg_bold[red]%}+%{$reset_color%}"       # untracked files
GIT_PROMPT_MODIFIED="%{$fg_bold[yellow]%}+%{$reset_color%}"     # tracked files modified
GIT_PROMPT_STAGED="%{$fg_bold[green]%}->%{$reset_color%}"       # staged changes present = ready for "git push"

# Right prompt with exit status of previous command if not successful
RPROMPT='%{$fg[green]%}$(bg_process)%{$reset_color%} $(git_prompt_string) %{$fg[red]%}%(?..[%?])%{$reset_color%} %{$fg[green]%}(%*)%{$reset_color%}'

#################
##### Misc ######
#################

# TMUX
if [[ -z "$TMUX" ]] && [[ -n "$DISPLAY" ]]; then # Test if tmux is running
    ID="$( tmux ls | grep -vm1 attached | cut -d: -f1 )" # get the id of a deattached session
    if [[ -z "$ID" ]]; then # if not available create a new one
        tmux new-session
    else
        tmux attach-session -t "$ID" # if available attach to it
    fi
fi
if [ -n "$TMUX" ]; then # If tmux is running
    # create a global per-pane variable that holds the pane's PWD
    export PS1=$PS1'$( [ -n $TMUX ] && tmux setenv -g TMUX_PWD_$(tmux display -p "#D" | tr -d %) $PWD)'
fi

# Color man pages
export LESS_TERMCAP_mb=$'\E[01;32m'
export LESS_TERMCAP_md=$'\E[01;32m'
export LESS_TERMCAP_me=$'\E[0m'
export LESS_TERMCAP_se=$'\E[0m'
export LESS_TERMCAP_so=$'\E[01;47;34m'
export LESS_TERMCAP_ue=$'\E[0m'
export LESS_TERMCAP_us=$'\E[01;36m'
export LESS=-r

# Add support for GnuPG
export GPG_TTY=$(tty)

# Customize tty
if [ "$TERM" = "linux" ]; then
	printf '\033]P01a1813'; # black 
	printf '\033]P1991f1f'; # red
	printf '\033]P25c991f'; # green
	printf '\033]P3997b1f'; # yellow
	printf '\033]P41f3e99'; # blue
	printf '\033]P5991f70'; # magenta
	printf '\033]P61f9999'; # cyan
	printf '\033]P7ccbc95'; # white
	printf '\033]P8333026'; # bright black
	printf '\033]P9E62E2E'; # bright red
	printf '\033]PA8AE62E'; # bright green
	printf '\033]PBE6B82E'; # bright yellow
	printf '\033]PC2E5CE6'; # bright blue
	printf '\033]PDE62EA9'; # bright magenta
	printf '\033]PE2EE6E6'; # bright cyan
	printf '\003]PFE6D7AB'; # bright white
	clear;
fi
